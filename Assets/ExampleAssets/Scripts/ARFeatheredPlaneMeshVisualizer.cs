using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Serialization;
using UnityEngine.XR.ARFoundation;

/// <summary>
/// This plane visualizer demonstrates the use of a feathering effect
/// at the edge of the detected plane, which reduces the visual impression
/// of a hard edge.
/// </summary>
[RequireComponent(typeof(ARPlaneMeshVisualizer), typeof(MeshRenderer), typeof(ARPlane))]
public class ARFeatheredPlaneMeshVisualizer : MonoBehaviour
{
    [FormerlySerializedAs("m_FeatheringWidth")]
    [Tooltip("The width of the texture feathering (in world units).")]
    [SerializeField]
    float mFeatheringWidth = 0.2f;

    /// <summary>
    /// The width of the texture feathering (in world units).
    /// </summary>
    public float FeatheringWidth
    { 
        get { return mFeatheringWidth; }
        set { mFeatheringWidth = value; } 
    }

    void Awake()
    {
        _mPlaneMeshVisualizer = GetComponent<ARPlaneMeshVisualizer>();
        _mFeatheredPlaneMaterial = GetComponent<MeshRenderer>().material;
        _mPlane = GetComponent<ARPlane>();
    }

    void OnEnable()
    {
        _mPlane.boundaryChanged += ARPlane_boundaryUpdated;
    }

    void OnDisable()
    {
        _mPlane.boundaryChanged -= ARPlane_boundaryUpdated;
    }

    void ARPlane_boundaryUpdated(ARPlaneBoundaryChangedEventArgs eventArgs)
    {
        GenerateBoundaryUVs(_mPlaneMeshVisualizer.mesh);
    }

    /// <summary>
    /// Generate UV2s to mark the boundary vertices and feathering UV coords.
    /// </summary>
    /// <remarks>
    /// The <c>ARPlaneMeshVisualizer</c> has a <c>meshUpdated</c> event that can be used to modify the generated
    /// mesh. In this case we'll add UV2s to mark the boundary vertices.
    /// This technique avoids having to generate extra vertices for the boundary. It works best when the plane is 
    /// is fairly uniform.
    /// </remarks>
    /// <param name="mesh">The <c>Mesh</c> generated by <c>ARPlaneMeshVisualizer</c></param>
    void GenerateBoundaryUVs(Mesh mesh)
    {
        int vertexCount = mesh.vertexCount;

        // Reuse the list of UVs
        _sFeatheringUVs.Clear();
        if (_sFeatheringUVs.Capacity < vertexCount) { _sFeatheringUVs.Capacity = vertexCount; }

        mesh.GetVertices(_sVertices);

        Vector3 centerInPlaneSpace = _sVertices[_sVertices.Count - 1];
        Vector3 uv = new Vector3(0, 0, 0);
        float shortestUVMapping = float.MaxValue;

        // Assume the last vertex is the center vertex.
        for (int i = 0; i < vertexCount - 1; i++)
        {
            float vertexDist = Vector3.Distance(_sVertices[i], centerInPlaneSpace);

            // Remap the UV so that a UV of "1" marks the feathering boudary.
            // The ratio of featherBoundaryDistance/edgeDistance is the same as featherUV/edgeUV.
            // Rearrange to get the edge UV.
            float uvMapping = vertexDist / Mathf.Max(vertexDist - FeatheringWidth, 0.001f);
            uv.x = uvMapping;

            // All the UV mappings will be different. In the shader we need to know the UV value we need to fade out by.
            // Choose the shortest UV to guarentee we fade out before the border.
            // This means the feathering widths will be slightly different, we again rely on a fairly uniform plane.
            if (shortestUVMapping > uvMapping) { shortestUVMapping = uvMapping; }

            _sFeatheringUVs.Add(uv);
        }

        _mFeatheredPlaneMaterial.SetFloat("_ShortestUVMapping", shortestUVMapping);

        // Add the center vertex UV
        uv.Set(0, 0, 0);
        _sFeatheringUVs.Add(uv);

        mesh.SetUVs(1, _sFeatheringUVs);
        mesh.UploadMeshData(false);
    }

    static List<Vector3> _sFeatheringUVs = new List<Vector3>();

    static List<Vector3> _sVertices = new List<Vector3>();

    ARPlaneMeshVisualizer _mPlaneMeshVisualizer;

    ARPlane _mPlane;

    Material _mFeatheredPlaneMaterial;
}
